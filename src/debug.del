import "boss_stats.del";
disabled rule: "Debug HUD"
Event.OngoingPlayer
{
    CreateHudText(EventPlayer(), <"<0><1>'s Player Data", HeroIconString(HeroOf(EventPlayer())), LocalPlayer()>, <"<0>, <1>, Slot <2>", HeroOf(EventPlayer()), TeamOf(EventPlayer()), SlotOf(EventPlayer())>, null, Location.Left, 0, Color.White, Color.White, Color.White, HudTextRev.VisibleToAndString, Spectators.VisibleAlways);
    CreateHudText(EventPlayer(), <"Primary <0>", AbilityIconString(HeroOf(EventPlayer()), Button.PrimaryFire)>, null, <"=<0><1><2>", IsFiringPrimary(EventPlayer()), MaxAmmo(EventPlayer(), 0) > 0 ? <"Ammo=<0>/<1>", Ammo(EventPlayer(), 0), MaxAmmo(EventPlayer(), 0)> : "", <"<0><1><2>", AbilityCharge(EventPlayer(), Button.PrimaryFire) > 0 ? <"Charges=<0>", AbilityCharge(EventPlayer(), Button.PrimaryFire)> : "", AbilityResource(EventPlayer(), Button.PrimaryFire) > 0 ? <"Resource=<0>", AbilityResource(EventPlayer(), Button.PrimaryFire)> : "", <"<0><1>", MaxAmmo(EventPlayer(), 0) > 0 ? <"Reloading=<0>", IsReloading(EventPlayer())> : "", <"Is Held=<0>", IsButtonHeld(EventPlayer(), Button.PrimaryFire)>>>>, Location.Left, 1, Color.White, Color.White, Color.White, HudTextRev.VisibleToAndString, Spectators.VisibleAlways);
    CreateHudText(EventPlayer(), <"Secondary <0>", AbilityIconString(HeroOf(EventPlayer()), Button.SecondaryFire)>, null, <"=<0><1><2>", IsFiringSecondary(EventPlayer()), MaxAmmo(EventPlayer(), 1) > 0 ? <"Ammo=<0>/<1>", Ammo(EventPlayer(), 1), MaxAmmo(EventPlayer(), 1)> : "", <"<0><1><2>", AbilityCharge(EventPlayer(), Button.SecondaryFire) > 0 ? <"Charges=<0>", AbilityCharge(EventPlayer(), Button.SecondaryFire)> : "", AbilityResource(EventPlayer(), Button.SecondaryFire) > 0 ? <"Resource=<0>", AbilityResource(EventPlayer(), Button.SecondaryFire)> : "", <"Is Held=<0>", IsButtonHeld(EventPlayer(), Button.SecondaryFire)>>>, Location.Left, 2, Color.White, Color.White, Color.White, HudTextRev.VisibleToAndString, Spectators.VisibleAlways);
    CreateHudText(EventPlayer(), <"Ability 1 <0>", AbilityIconString(HeroOf(EventPlayer()), Button.Ability1)>, null, <"=<0>", IsUsingAbility1(EventPlayer())>, Location.Left, 3, Color.White, Color.White, Color.White, HudTextRev.VisibleToAndString, Spectators.VisibleAlways);
    CreateHudText(EventPlayer(), <"Ability 2 <0>", AbilityIconString(HeroOf(EventPlayer()), Button.Ability2)>, null, <"=<0>", IsUsingAbility2(EventPlayer())>, Location.Left, 4, Color.White, Color.White, Color.White, HudTextRev.VisibleToAndString, Spectators.VisibleAlways);
    CreateHudText(EventPlayer(), <"Ultimate <0>", AbilityIconString(HeroOf(EventPlayer()), Button.Ultimate)>, null, <"=<0><1><2>", IsUsingUltimate(EventPlayer()), <"Ultimate Charge=<0>%", UltimateChargePercent(EventPlayer())>, <"<0><1><2>", AbilityCharge(EventPlayer(), Button.Ultimate) > 0 ? <"Charges=<0>", AbilityCharge(EventPlayer(), Button.Ultimate)> : "", AbilityResource(EventPlayer(), Button.Ultimate) > 0 ? <"Resource=<0>", AbilityResource(EventPlayer(), Button.Ultimate)> : "", <"Is Held=<0>", IsButtonHeld(EventPlayer(), Button.Ultimate)>>>, Location.Left, 5, Color.White, Color.White, Color.White, HudTextRev.VisibleToAndString, Spectators.VisibleAlways);
    CreateHudText(EventPlayer(), <"Health = <0>/<1> Is Alive = <2>", MaxHealth(EventPlayer()), Health(EventPlayer()), IsAlive(EventPlayer())>, null, null, Location.Left, 6, Color.White, Color.White, Color.White, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
    CreateHudText(EventPlayer(), <"Height = <0> Altitude = <1>", height, AltitudeOf(EventPlayer())>, null, null, Location.Left, 7);
    CreateHudText(EventPlayer(), <"Is In Alt Form = <0>", IsInAlternateForm(EventPlayer())>, null, null, Location.Left, 7);
    CreateHudText(EventPlayer(), <"HorzFacing = <0> VertFacing = <1>", HorizontalFacingAngleOf(EventPlayer()), VerticalFacingAngleOf(EventPlayer())>, null, null, Location.Left, 7);

}
